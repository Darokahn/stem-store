let get = (item) => {return document.getElementById(item);}

function getVar(varname) {
    return getComputedStyle(document.documentElement).getPropertyValue(varname).trim();
}

function asyncLoop(condition, callback, timeout) {
    return new Promise((resolve) => {
        let loop = () => {
            setTimeout(async () => {
                if (await condition()) {
                    await callback()
                    loop()
                }
                else {
                    resolve(true);
                }
            }, timeout);
        };
        loop();
    });
}

let ticketArea = get("ticketBar");

let storePage = get("storePage");

let cart = get("cart");

let looseTickets = get("looseTickets");

let ticketStack = get("ticketStack");

let button = get("button");

let numpad = get("numpad");

let itemSection = get("itemSection");

let cartItems = [];

function getAvailableLooseTickets() {
    let availableSpace = looseTickets.getBoundingClientRect().height;
    let ticketUnitSize = 50;
    return Math.floor(availableSpace / ticketUnitSize) - 1; // some transforms make this imprecise enough to overflow sometimes, but subtracting 1 is reliable enough.
}

function addLooseTicket() {
    let newTicket = document.createElement("img");
    let left = Math.random() * 100 % 50 - 25;
    newTicket.src = "images/ticket.png";
    newTicket.classList.add("ticket");
    newTicket.style.left = left.toString() + "%";
    let rotation = Math.random() * 100 % 20 - 10;
    newTicket.style.transform = "rotate(" + rotation.toString() + "deg)";
    looseTickets.appendChild(newTicket);
}

function addStackTicket() {
    let left = Math.random() * 100 % 10 - 5;
    let newTicket = document.createElement("img");
    newTicket.src = "images/ticket.png";
    newTicket.style.left = left.toString() + "%";
    newTicket.classList.add("ticket");
    ticketStack.appendChild(newTicket);
}

function addTicket() {
    if (looseTickets.children.length < getAvailableLooseTickets() - 1) {
        addLooseTicket();
    }
    else {
        addStackTicket();
    }
    // adding to the stack may push a loose ticket offscreen
    while (looseTickets.children.length > getAvailableLooseTickets() && getAvailableLooseTickets() > 0) {
        if (looseTickets.children.length > 0)
            looseTickets.removeChild(looseTickets.children[0]);
        addStackTicket();
    }
}

async function distributeTickets() {
    await asyncLoop(
        (() => looseTickets.children.length < getAvailableLooseTickets() - 1 && ticketStack.children.length > 0),
        () => {
            ticketStack.removeChild(ticketStack.children[0]);
            addLooseTicket();
        },
        60
    );
}

function ripTicket() {
    if (looseTickets.children.length > 0) {
        looseTickets.removeChild(looseTickets.children[looseTickets.children.length - 1]);
    }
    else {
        ticketStack.removeChild(ticketStack.children[ticketStack.children.length - 1]);
    }
}

async function setTickets(number, interval) {
    await asyncLoop(
        () => looseTickets.children.length + ticketStack.children.length > number,
        () => ripTicket(),
        interval / number
    );
    distributeTickets();
    await asyncLoop(
        () => looseTickets.children.length + ticketStack.children.length < number,
        () => addTicket(),
        interval / number
    );
}

function validateHex(string) {
    if (string[0] !== "#") return false;
    if (!(string.length == 7 || string.length == 9)) return false;
    for (let i = 1; i < string.length; i++) {
        if (!("1234567890abcdefABCDEF".includes(string[i]))) return false;
    }
    return true;
}

function addColor(hexString1, hexString2, negative) {
    if (
            !(
                validateHex(hexString1) && 
                validateHex(hexString2)
            ) || 
            hexString1.length !== 7 || 
            hexString2.length !== 7
        ) return;
    let color1 = [parseInt(hexString1.slice(1, 3), 16), parseInt(hexString1.slice(3, 5), 16), parseInt(hexString1.slice(5, 7), 16)];
    let color2 = [parseInt(hexString2.slice(1, 3), 16), parseInt(hexString2.slice(3, 5), 16), parseInt(hexString2.slice(5, 7), 16)];
    console.log(color1, color2);
    let finalColor = [
      Math.min(255, Math.max(0, color1[0] + color2[0] * ((negative * 2) - 1))),
      Math.min(255, Math.max(0, color1[1] + color2[1] * ((negative * 2) - 1))),
      Math.min(255, Math.max(0, color1[2] + color2[2] * ((negative * 2) - 1)))
    ];
    return "#" + finalColor[0].toString(16).padStart(2, "0") + finalColor[1].toString(16).padStart(2, "0") + finalColor[2].toString(16).padStart(2, "0");
}

function makeButton(color, label, callBack) {
    let content = get("button").content.cloneNode(true);
    let button = document.createElement('div');
    button.appendChild(content);
    for (let el of button.querySelectorAll(".highLight")) {
        el.setAttribute("stop-color", addColor(color, "#333333", false));
    }

    for (let el of button.querySelectorAll(".lowLight")) {
        el.setAttribute("stop-color", addColor(color, "#333333", true));
    }
    let grad1 = button.querySelector(".shine1");
    let grad2 = button.querySelector(".shine2");
    grad1.id = "shine1" + color.toString().slice(1);
    grad2.id = "shine2" + color.toString().slice(1);
    button.querySelector(".mainColor").setAttribute("fill", color);
    button.querySelector(".buttonLabel").textContent = label;
    button.querySelector(".outerRing").setAttribute("fill", "url(#" + grad1.id + ")");
    button.querySelector(".innerRing").setAttribute("fill", "url(#" + grad2.id + ")");
    button.onclick = callBack;
    return button;
}

function removeNumpad() {
    let input = get("input");
    numpad.style.display = "none";
    input.style.display = "none";
}

function numpadSetup() {
    let input = get("input");
    for (let i = 0; i < 12; i++) {
        let label = null;
        let callBack = null;
        let color = null;
        if (i < 9) {
            label = (i + 1).toString();
            callBack = () => input.textContent += label;
            color = getVar("--gray");
        }
        else if (i === 10) {
            label = (0).toString();
            callBack = () => input.textContent += label;
            color = getVar("--gray");
        }
        else if (i === 9) {
            label = "âœ“";
            callBack = () => {
                let ticketCount = parseInt(input.textContent);
                removeNumpad();
                ticketBar.classList.remove("isLarger");
                mainContent.classList.remove("isHidden");
                setTickets(ticketCount, 1000);
            }
            color = getVar("--blue");
        }
        else if (i === 11) {
            label = "X";
            callBack = () => input.textContent = "";
            color = getVar("--red");
        }
        let newButton = makeButton(color, label, callBack);
        numpad.appendChild(newButton);
    }
}

async function loadCard(ticketValue, name) {
    let newCard = get("itemCard").content.firstElementChild.cloneNode(true);
    console.log(newCard);
    newCard.querySelector(".purchaseName").textContent = name;
    newCard.querySelector(".purchaseThumbnail").src = "images/prizes/" + name + ".jpg";
    itemSection.appendChild(newCard);
}

async function loadMain(ticketValue) {
    let records = await fetch("prizes.json");
    recordsJSON = await records.json();
    let thisPage = recordsJSON[ticketValue];
    for (let item of thisPage) {
        loadCard(ticketValue, item);
    }
}

function moveSliderBehind(item) {
    let slider = get("slider");
    let container = rect.parentElement;
    let rect = item.getBoundingClientRect();
}

let ticketCount = 8;

numpadSetup();
loadMain(ticketCount);
